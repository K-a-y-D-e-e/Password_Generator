#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>

// Function to generate a random password
char *generate_password(int length) {
    const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+";
    char *password = malloc((length + 1) * sizeof(char));
    if (!password) return NULL;

    for (int i = 0; i < length; ++i) {
        int index = rand() % strlen(charset);
        password[i] = charset[index];
    }
    password[length] = '\0';
    return password;
}

// Callback function to generate a password and update the label
void generate_password_callback(GtkWidget *widget, gpointer label) {
    int length = 12; // Default password length
    char *password = generate_password(length);
    gtk_label_set_text(GTK_LABEL(label), password);
    free(password);
}

int main(int argc, char *argv[]) {
    gtk_init(&argc, &argv);

    // Create the main window
    GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
    gtk_window_set_title(GTK_WINDOW(window), "Password Generator");
    gtk_window_set_default_size(GTK_WINDOW(window), 300, 200);
    g_signal_connect(window, "destroy", G_CALLBACK(gtk_main_quit), NULL);

    // Create a label to display the generated password
    GtkWidget *password_label = gtk_label_new("Your Password Will Appear Here");
    gtk_container_add(GTK_CONTAINER(window), password_label);

    // Create a button to generate a new password
    GtkWidget *generate_button = gtk_button_new_with_label("Generate Password");
    g_signal_connect(generate_button, "clicked", G_CALLBACK(generate_password_callback), password_label);
    gtk_container_add(GTK_CONTAINER(window), generate_button);

    gtk_widget_show_all(window);

    gtk_main();

    return 0;
}
